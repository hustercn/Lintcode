给出两个字符串，找到最长公共子串，并返回其长度。
注意事项:子串的字符应该连续的出现在原字符串中，这与子序列有所不同。
样例给出A=“ABCD”，B=“CBCE”，返回 2

注意：必须要保证连续的子串
代码：
/*c[i][j]可递归地表述如下：
（1）如果xi == yj， 则 c[i][j] = c[i-1][j-1]+1
（2）如果xi!= yj,  那么c[i][j] = 0
*/

class Solution {
public:    
    /**
     * @param A, B: Two string.
     * @return: the length of the longest common substring.
     */
    int longestCommonSubstring(string &A, string &B) {

    int len1 = A.length();
    int len2 = B.length();
    int result = 0;     		//记录最长公共子串长度
    int c[len1+1][len2+1];		//用二维数组保存公共字符串
	
	
    for (int i = 0; i <= len1; i++) 
	{
        for( int j = 0; j <= len2; j++)
		{
            if(i == 0 || j == 0) 
			{
                c[i][j] = 0;
            } else if (A[i-1] == B[j-1]) 
			{
                c[i][j] = c[i-1][j-1] + 1;
                result = max(c[i][j], result);
            } else 
			{
                c[i][j] = 0;
            }
        }
    }
	return result;
    }
};
