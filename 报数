报数指的是，按照其中的整数的顺序进行报数，然后得到下一个数。如下所示：
1, 11, 21, 1211, 111221, ...
1 读作 "one 1" -> 11.
11 读作 "two 1s" -> 21.
21 读作 "one 2, then one 1" -> 1211.
给定一个整数 n, 返回 第 n 个顺序。
样例给定 n = 5, 返回 "111221".


分析：
先来观察一下，要我们干嘛。给出了第一个数1（当然是字符串形式的），我们将它读出来，因为只有一个1，所以，叫做“one 1”，
由此，得到第二个数11（字符串形式）。。。以此类推。
其实，这个形式从逻辑上讲，似乎和“斐波那契数列”（详见：点击打开链接）有点相似，都是依赖于之前的结果，得到之后的结果，
所以，和“斐波那契数列”的做法一样，我们可以用递归，也可以用迭代，考虑到效率因素，我们是用迭代的方法。
其实，就是这样一种形式，对前一个结果进行分析，把相邻的，且相同的数计数（记为count），
然后把这个count的字符串形式和它所对应的值的字符串形式连接起来，然后再分析之后的字符。
那样例中的“1211”来说，前面的1,2都是单独的，所以是“11”（表示1个1），“12”（表示1个2），最后两个1相邻，所以是“21”（2个1），
整个连起来，就是“111221”，也就是第五个结果。



代码：
class Solution {
public:
    /**
     * @param n the nth
     * @return the nth sequence
     */
    string countAndSay(int n) {
        string res="1";                     //保存结果的字符串
        
        while(--n)
        {
            int count=1;                  //计数的变量
            string tem="";                //临时保存字符串变量
            for(int i=1;i<res.size();i++)
            {
                if(res[i]==res[i-1])
                {   
                    count++;
                }
                else{
                    tem+=to_string(count)+res[i-1];             //to_string函数的重要性
                    count=1;
                }
                
            }
            tem+=to_string(count)+res.back();
            res=tem;
        }
        return res;
    }
};
